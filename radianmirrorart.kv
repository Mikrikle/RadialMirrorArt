#:kivy 1.0
#: import ew kivy.uix.effectwidget


<ColorPopup>:
    colorbox:colorbox
    no_bg_switch:no_bg_switch
    no_center_point_switch:no_center_point_switch
    auto_dismiss: False
    title_align:'center'
    size_hint:.9,.8
    id:color_popup
    title:'Colors'
    BoxLayout:
        id:colorbox
        orientation:'vertical'
        BoxLayout:
            size_hint_y:.3
            orientation:'vertical'
            canvas.before:
                Color: 
                    rgba: .1, .1, .1, 1
                RoundedRectangle:
                    size:(self.size[0], self.size[1])
                    pos:(self.pos[0], self.pos[1])
                    radius: [(20, 20), (20, 20), (20, 20), (20, 20)]
            BoxLayout:
                Label:
                    text:'Save without background'
                Widget:
                    size_hint_x:.1
                MDSwitch:
                    id:no_bg_switch
                    on_active:root.disable_bg()
                Widget:
                    size_hint_x:.1
            BoxLayout:
                Label:
                    text:'Off center point'
                Widget:
                    size_hint_x:.1
                MDSwitch:
                    id:no_center_point_switch
                    on_active:root.disable_center_point()
                Widget:
                    size_hint_x:.1
        Widget:
            size_hint_y:.05
        BoxLayout:
            size_hint_y:.15
            orientation:'vertical'
            Label:
                text:'Select color for background'
                size_hint_y:.2


<MyPopup>:
    auto_dismiss: False
    title_align:'center'
    size_hint:.95,.85

<SettingsPopup>:
    title:'Menu'
    title_align:'center'
    size_hint:.8,.6
    auto_dismiss:False
    opacity:.8
    BoxLayout:
        paddig:20
        orientation:'vertical'
        Widget:
            size_hint_y:.05
        MDRectangleFlatButton:
            text:'Save picture'
            on_release:root.save_canvas()
        BoxLayout:
            MDRectangleFlatButton:
                text:'Change background'
                on_release:root.color_popup.open()
        Widget:
            size_hint_y:.05
        BoxLayout:
            orientation:'vertical'
            canvas.before:
                Color: 
                    rgba: .1, .1, .1, 1
                RoundedRectangle:
                    size:(self.size[0], self.size[1])
                    pos:(self.pos[0], self.pos[1])
                    radius: [(20, 20), (20, 20), (20, 20), (20, 20)]
            Label:
                text:'Effects'
            BoxLayout:
                Label:
                    text:'FXAA smoothing:'
                Label:
                    size_hint_x:.2
                    text:str(round(fxaa_slider.value, 1))
                MDSlider:
                    id:fxaa_slider
                    value:root.FXAA
                    min:0
                    max:50
                    step:0.5
                    on_touch_move:root.set_effects('FXAA', round(fxaa_slider.value, 1))
                    on_touch_up:root.set_effects('FXAA', round(fxaa_slider.value, 1))
            BoxLayout:
                Label:
                    text:'Pixilixation:'
                Label:
                    size_hint_x:.2
                    text:str(int(pixilization_slider.value))
                MDSlider:
                    id:pixilization_slider
                    value:root.PIXILIZATION
                    min:1
                    max:200
                    step:1
                    on_touch_move:root.set_effects('Pixilixation', pixilization_slider.value)
                    on_touch_up:root.set_effects('Pixilixation', pixilization_slider.value)
            Widget:
                size_hint_y:.2
        Widget:
            size_hint_y:.1
        MDRectangleFlatButton:
            text:"Close"
            on_release:root.dismiss()
        Widget:
            size_hint_y:.1



<CustomDropDownDrawingMode>:
    opacity:.8
    canvas.before:
        Color: 
            rgba: .05, .05, .05, 1
        RoundedRectangle:
            size:(self.size[0], self.size[1])
            pos:(self.pos[0], self.pos[1])
            radius: [(20, 20), (20, 20), (20, 20), (20, 20)]
    MDRoundFlatIconButton:
        size_hint_x:1
        text:'Simple'
        icon:'current-ac'
        on_release:root.select(('simple', 'current-ac'))
    MDRoundFlatIconButton:
        size_hint_x:1
        text:'Mirror'
        icon:'arrow-split-vertical'
        on_release:root.select(('symmetric', 'arrow-split-vertical'))
    MDRoundFlatIconButton:
        size_hint_x:1
        text:'Double-mirror'
        icon:'crop-square'
        on_release:root.select(('square', 'crop-square'))
    MDRoundFlatIconButton:
        size_hint_x:1
        text:'Radian'
        icon:'decagram-outline'
        on_release:root.select(('radian', 'decagram-outline'))
    MDRoundFlatIconButton:
        size_hint_x:1
        text:'Radian-symmetric'
        icon:'decagram'
        on_release:root.select(('radian-symmetric', 'decagram'))

<DropDownBox@BoxLayout>:
    size_hint_y: None
    orientation:'vertical'
    canvas.before:
        Color: 
            rgba: .05, .05, .05, 1
        RoundedRectangle:
            size:(self.size[0], self.size[1])
            pos:(self.pos[0], self.pos[1])
            radius: [(20, 20), (20, 20), (20, 20), (20, 20)]


<CustomDropDownNumberOfLines>:
    opacity:.8
    DropDownBox:
        height: root.HEIGHT
        BoxLayout:
            size_hint_y: None
            height: root.HEIGHT//3
            Widget:
            Label:
                text:'close the lines?'
                size_hint_y: None
                size_hint_x:.8
                height: root.HEIGHT//4
            Widget:
                size_hint_x:.5
            MDSwitch:
                size_hint_y: None
                height: root.HEIGHT//4
                on_active:root.set_close_lines(self.active)
            Widget:
        Widget:
            size_hint_y: None
            height: root.HEIGHT//6
        BoxLayout:
            size_hint_y: None
            height: root.HEIGHT//3
            BoxLayout:
                orientation:'vertical'
                Label:
                    text:'Numbers of line\n[sub](For radians mods)[/sub]'
                    markup:True
                BoxLayout:
                    MDIconButton:
                        icon:'arrow-left'
                        on_release: if num_slider.value > 2 : num_slider.value -= 1
                    MDSlider:
                        id:num_slider
                        min:2
                        step: 1
                        max:250
                        value:root.VALUE
                        on_touch_move:root.slider_setattr(int(self.value))
                        on_touch_up:root.slider_setattr(int(self.value))
                    MDIconButton:
                        icon:'arrow-right'
                        on_release: if num_slider.value < 250 : num_slider.value += 1
        Widget:
            size_hint_y: None
            height: root.HEIGHT//6

<CustomDropDownLineWidth>:
    opacity:.8
    DropDownBox:
        height: root.HEIGHT//2
        BoxLayout:
            size_hint_y: None
            height: root.HEIGHT//3
            BoxLayout:
                orientation:'vertical'
                Label:
                    text:'Lines width'
                BoxLayout:
                    MDIconButton:
                        icon:'arrow-left'
                        on_release: if width_slider.value > 1 : width_slider.value -= 1
                    MDSlider:
                        id:width_slider
                        min:1
                        step: 1
                        max:50
                        value:root.VALUE
                        on_touch_move:root.slider_setattr(int(self.value))
                        on_touch_up:root.slider_setattr(int(self.value))
                    MDIconButton:
                        icon:'arrow-right'
                        on_release: if width_slider.value < 50 : width_slider.value += 1
        Widget:
            size_hint_y: None
            height: root.HEIGHT//6


<ToolBox@BoxLayout>:
    canvas.before:
        Color: 
            rgba: .1, .1, .1, 1
        Rectangle:
            size:(self.size[0], self.size[1])
            pos:(self.pos[0], self.pos[1])

<ToolBtn@MDFlatButton>:
    background_normal:''
    background_color:.1,.1,.1,1
    size_hint_y:1

<MyPaintWidget>:

<Container>:
    paint:paint
    effects_widget:effects_widget
    EffectWidget:
        id:effects_widget
        effects: ew.HorizontalBlurEffect(size=paint.BLUUR_SIZE), ew.VerticalBlurEffect(size=paint.BLUUR_SIZE), ew.FXAAEffect(), ew.PixelateEffect(pixel_size=paint.PIXEL_SIZE)
        MyPaintWidget:
            id:paint
            top_toolbox:top_toolbox
            down_toolbox:down_toolbox
            down_current_color_label:down_current_color_label
            down_current_line_width:down_current_line_width
            down_current_nums_of_lines:down_current_nums_of_lines
            drawing_mode_select_btn:drawing_mode_select_btn
            down_current_icon:down_current_icon
            minimize_btn:minimize_btn
            pos_hint:{'x':0, 'y':0}
            size_hint:(1,1)
            canvas.before:
                Color:
                    group: 'background'
                    rgba: paint.BACKGROUND_COLOR
                Rectangle:
                    group: 'background'
                    size: self.size
                    pos: self.pos
                Color:
                    group: 'center'
                    rgba: paint.CENTER_COLOR
                Rectangle:
                    group: 'center'
                    size:(2, 2)
                    pos:(self.size[0]//2-1, self.size[1]//2-1)


    ToolBox:
        id:top_toolbox
        pos_hint:{'x':0, 'y':.9}
        size_hint:(1,.1)
        padding:20
        MDIconButton:
            icon:'delete'
            text:'clear'
            on_release:paint.clear_canvas()
        Widget:
        MDIconButton:
            icon:'undo'
            text:'undo'
            on_release:paint.undo()
        MDIconButton:
            icon:'redo'
            text:'redo'
            on_release:paint.redo()
        Widget:
        MDRoundFlatIconButton:
            id:drawing_mode_select_btn
            icon:'settings'
            text:'Menu'
            on_release:paint.open_settings_popup()

    ToolBox:
        id:down_toolbox
        size_hint:(1,.09)
        paddig:5
        pos_hint:{'x':0, 'y':0}
        BoxLayout:
            id:box
            paddig:10
            MDIconButton:
                size_hint_y:1
                halign: "center"
                id:down_current_icon
                icon:'decagram-outline'
                on_release:paint.dropdown_drawing_mode.open(box)
            ToolBtn:
                size_hint_x:1
                id:down_current_nums_of_lines
                text:f'Lines\n{paint.NUMBER_OF_LINES}'
                on_release:paint.number_of_lines_dropdown.open(box)
            ToolBtn:
                size_hint_x:1
                id:down_current_line_width
                text:f'Width\n{paint.LINE_WIDTH}'
                on_release:paint.line_width_dropdown.open(box)
            ToolBtn:
                size_hint_x:1
                id:down_current_color_label
                background_color:.1,.1,.1,1
                on_release:paint.open_color_popup()
                canvas:
                    RoundedRectangle:
                        size:(self.size[0]-20, self.size[1]-20)
                        pos:(self.pos[0]+10, self.pos[1]+10)
                        radius: [(10, 10), (10, 10), (10, 10), (10, 10)]
            Widget:

    MDFloatingActionButton:
        id:minimize_btn
        icon:'arrow-down'
        md_bg_color:app.theme_cls.primary_dark
        text_color: .05,.05,.05,1
        user_font_size: "5sp"
        pos_hint:{'x':.85, 'y':.06}
        on_release:paint.minimize_maximize_toolboxes(self.icon)
